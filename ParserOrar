package WebParser;

import java.io.IOException;
import java.net.URL;
import java.time.LocalTime;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Scanner;
import java.util.regex.Matcher;
import java.util.regex.Pattern;



class DayRecord{
    public LocalTime startHour;
    public LocalTime endHour;
    public String courseName;
    public String actType;
    public ArrayList<String> teachersNames;
    public ArrayList<String> studentsGroups;
    public DayRecord(LocalTime startHour,LocalTime endHour,String courseName,String actType,ArrayList<String> teachersNames,ArrayList<String> studentsGroups){
        this.startHour=startHour;
        this.endHour=endHour;
        this.courseName=courseName;
        this.actType=actType;
        this.teachersNames=teachersNames;
        this.studentsGroups=studentsGroups;
    }
    /*
    public static DayRecord parseDayRecord(String line){
        Pattern pattern=Pattern.compile("<td>[^<]*</td>");
        Matcher matcher=pattern.matcher(line);
        LocalTime startHour;
        LocalTime endHour;
        String courseName;
        String actType;
        ArrayList<String> teachersNames=new ArrayList<String>();
        ArrayList<String> studentsGroups=new ArrayList<String>();

        int firstIdnex;
        int lastIndex;
        if(matcher.find()==true){//determinam startHour
            firstIdnex=matcher.start();
            lastIndex=matcher.end();
            startHour=LocalTime.parse(line.substring(firstIdnex+4,lastIndex-5));
        }

        if(matcher.find()==true){//determinam endHour
            firstIdnex=matcher.start();
            lastIndex=matcher.end();
            endHour=LocalTime.parse(line.substring(firstIdnex+4,lastIndex-5));
        }

        if(matcher.find()==true){//determinam courseName
            firstIdnex=matcher.start();
            lastIndex=matcher.end();
            courseName=line.substring(firstIdnex+4,lastIndex-5);
        }

        if(matcher.find()==true){//determinam actType
            firstIdnex=matcher.start();
            lastIndex=matcher.end();
            actType=line.substring(firstIdnex+4,lastIndex-5);
        }
        if(matcher.find()==true){//determinal numele profesorilor
            firstIdnex=matcher.start();
            lastIndex=matcher.end();
            String auxString=line.substring(firstIdnex+4,lastIndex-5);
            try {
                Scanner myScanner = new Scanner(auxString);
                while (myScanner.hasNext() == true) {
                    teachersNames.add(myScanner.nextLine());
                }
                myScanner.close();
            }catch(Exception e){
                System.out.println("exception happend");
            }
        }
        if(matcher.find()==true){
            firstIdnex=matcher.start();
            lastIndex=matcher.end();

            String auxString=line.substring(firstIdnex+4,lastIndex-5);
            try {
                Scanner myScanner = new Scanner(auxString);
                myScanner.useDelimiter(" ,\n");
                while (myScanner.hasNext() == true) {
                    studentsGroups.add(myScanner.next());
                }
                myScanner.close();
            }catch(Exception e){
                System.out.println("exception happend");
            }
        }
    }
     */
}

class DayData{
    public String dayName;
    public DayRecord dayRecord;
    public DayData(String dayName,DayRecord dayRecord){
        this.dayName=dayName;
        this.dayRecord=dayRecord;
    }

}


class MyData{
    public String roomCode;
    public DayData dayData;
    public MyData(String roomCode,DayData dayData){
        this.roomCode=roomCode;
        this.dayData=dayData;
    }
}


public class MyParser {
    public static LinkedList<String> linksList=new LinkedList<>();
    public static LinkedList<String> pagesList=new LinkedList<>();
    public static URL pageURL;
    public static Scanner inputPage;
    public static String pageContent;
    public static void main(String args[]){
        /************************************************************************/
        /*
        * Extragem din pagina taote url-urile si le memoram in lista linksList
        * */
        try{
            pageURL=new URL("https://profs.info.uaic.ro/~orar/orar_resurse.html");
            inputPage=new Scanner(pageURL.openStream());
            pageContent="";
            while(inputPage.hasNext()==true){
                pageContent=pageContent+inputPage.nextLine();
            }
            inputPage.close();
        }catch(Exception e){
            System.out.println("problema la accesarea fisierului");
        }
        //System.out.println(pageContent);
        Pattern firstPattern =Pattern.compile("<a [^>]*>[^(</a>)]*</a>");
        Matcher matcher= firstPattern.matcher(pageContent);

        int firstIndex;
        int lastIndex;
        while(matcher.find()==true){
            linksList.add(pageContent.substring(matcher.start(),matcher.end()));
        }

        /*************************************************************************/

        /*************************************************************************/
        /*
        * selectam din rezultatul expresiilor doar valoarea ce reprezinta adresa paginii web
        *
        */
        int index=0;
        for(String path:linksList){
            firstPattern =Pattern.compile("\"[^\"]*\"");
            matcher=firstPattern.matcher(path);
            if(matcher.find()==true){
                linksList.set(index,path.substring(matcher.start()+1,matcher.end()-1));
                //System.out.println(path.substring(matcher.start(),matcher.end()));
                index++;
            }
        }
        /*****************************************************************************/

        for(String path:linksList){
            try{
                URL nextPageURL=new URL("https://profs.info.uaic.ro/~orar/"+path);
                Scanner pageScanner=new Scanner(nextPageURL.openStream());
                String  pageContent="";
                while(pageScanner.hasNext()==true){
                    pageContent=pageContent+pageScanner.nextLine();
                }
                Pattern tablePattern;
                Matcher tableMatcher;
                tablePattern=Pattern.compile("<table [^>]*>[^</table>]*</table>");
                tableMatcher=tablePattern.matcher(pageContent);
                if(tableMatcher.find()==true){
                    pagesList.add(pageContent.substring(tableMatcher.start(),tableMatcher.end()));
                }else{
                    System.out.println("pattern no found");
                }
                pageScanner.close();
            }catch(Exception e){
                System.out.println("problema la conectarea cu pagina ceruta " + "https://profs.info.uaic.ro/~orar/"+path);
            }
        }
        /***********************************************************************************/

        for(String table:pagesList){
            System.out.println(table);
            System.out.println("\n------------------------------------------------------------------\n");
        }

        /*
        for(String page: pagesList){
            Pattern myPattern;
            Matcher myMatcher;
            myPattern=Pattern.compile("<tr>[^(</tr>)]*</tr>");
            myMatcher=myPattern.matcher(page);
            int fIndex;
            int lIndex;
            if(myMatcher.find()==true){
                fIndex=myMatcher.start();
                lIndex=myMatcher.end();

                while(myMatcher.find()==true){
                    firstIndex=myMatcher.start();
                    lastIndex=myMatcher.end();
                    String subText=page.substring(fIndex,lIndex);
                    Pattern innerPattern;
                    Matcher innerMathcer;
                    innerPattern=Pattern.compile("<td>[^</td>]*</td>");
                    innerMathcer=innerPattern.matcher(subText);


                    System.out.println(subText);
                    if(innerMathcer.groupCount()==1){

                    }else{

                    }

                }

            }
        }*/
    }
}
